'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _enzyme = require('enzyme');

var _sizePerPageOption = require('../src/size-per-page-option');

var _sizePerPageOption2 = _interopRequireDefault(_sizePerPageOption);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('SizePerPageOption', function () {
  var wrapper = void 0;
  var text = 'page1';
  var page = 1;
  var onSizePerPageChange = _sinon2.default.stub();

  beforeEach(function () {
    onSizePerPageChange.reset();
  });

  describe('when bootstrap4 prop is true', function () {
    beforeEach(function () {
      var props = { text: text, page: page, onSizePerPageChange: onSizePerPageChange };
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_sizePerPageOption2.default, props));
    });

    it('should render SizePerPageOption correctly', function () {
      expect(wrapper.length).toBe(1);
      expect(wrapper.find('li.dropdown-item').length).toBe(1);
      expect(wrapper.find('[data-page=' + page + ']').length).toBe(1);
      expect(wrapper.text()).toEqual(text);
    });

    describe('when MouseDown event happen', function () {
      var preventDefault = _sinon2.default.stub();
      beforeEach(function () {
        wrapper.find('a').simulate('mousedown', { preventDefault: preventDefault });
      });

      it('should calling props.onSizePerPageChange correctly', function () {
        expect(preventDefault.calledOnce).toBeTruthy();
        expect(onSizePerPageChange.calledOnce).toBeTruthy();
        expect(onSizePerPageChange.calledWith(page)).toBeTruthy();
      });
    });
  });

  describe('when bootstrap4 prop is true', function () {
    beforeEach(function () {
      var props = { text: text, page: page, onSizePerPageChange: onSizePerPageChange };
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_sizePerPageOption2.default, _extends({}, props, { bootstrap4: true })));
    });

    it('should render SizePerPageOption correctly', function () {
      expect(wrapper.length).toBe(1);
      expect(wrapper.find('a.dropdown-item').length).toBe(1);
      expect(wrapper.find('[data-page=' + page + ']').length).toBe(1);
      expect(wrapper.text()).toEqual(text);
    });

    describe('when MouseDown event happen', function () {
      var preventDefault = _sinon2.default.stub();
      beforeEach(function () {
        wrapper.find('a').simulate('mousedown', { preventDefault: preventDefault });
      });

      it('should calling props.onSizePerPageChange correctly', function () {
        expect(preventDefault.calledOnce).toBeTruthy();
        expect(onSizePerPageChange.calledOnce).toBeTruthy();
        expect(onSizePerPageChange.calledWith(page)).toBeTruthy();
      });
    });
  });
});