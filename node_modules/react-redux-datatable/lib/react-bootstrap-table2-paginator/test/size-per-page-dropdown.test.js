'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _enzyme = require('enzyme');

var _sizePerPageOption = require('../src/size-per-page-option');

var _sizePerPageOption2 = _interopRequireDefault(_sizePerPageOption);

var _sizePerPageDropdown = require('../src/size-per-page-dropdown');

var _sizePerPageDropdown2 = _interopRequireDefault(_sizePerPageDropdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var shallowWithContext = function shallowWithContext(elem) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var wrapper = (0, _enzyme.shallow)(elem);
  var Children = wrapper.props().children(context);
  return (0, _enzyme.shallow)(Children);
};

describe('SizePerPageDropDown', function () {
  var wrapper = void 0;
  var currSizePerPage = '25';
  var options = [{
    text: '10',
    page: 10
  }, {
    text: '25',
    page: 25
  }];
  var onClick = _sinon2.default.stub();
  var onBlur = _sinon2.default.stub();
  var onSizePerPageChange = _sinon2.default.stub();
  var props = {
    currSizePerPage: currSizePerPage,
    options: options,
    onClick: onClick,
    onBlur: onBlur,
    onSizePerPageChange: onSizePerPageChange
  };

  describe('default SizePerPageDropDown component', function () {
    beforeEach(function () {
      wrapper = shallowWithContext(_react2.default.createElement(_sizePerPageDropdown2.default, props), { bootstrap4: false });
    });

    it('should rendering SizePerPageDropDown correctly', function () {
      expect(wrapper.length).toBe(1);
      expect(wrapper.find('button').length).toBe(1);
      expect(wrapper.find('button').text()).toEqual(currSizePerPage + ' ');
    });

    it('should rendering SizePerPageOption successfully', function () {
      expect(wrapper.find('ul.dropdown-menu').length).toBe(1);
      var sizePerPageOptions = wrapper.find(_sizePerPageOption2.default);
      expect(sizePerPageOptions.length).toBe(options.length);
      sizePerPageOptions.forEach(function (sizePerPage, i) {
        var option = options[i];
        expect(sizePerPage.prop('text')).toEqual(option.text);
        expect(sizePerPage.prop('page')).toEqual(option.page);
        expect(sizePerPage.prop('bootstrap4')).toBeFalsy();
        expect(sizePerPage.prop('onSizePerPageChange')).toEqual(onSizePerPageChange);
      });
    });

    it('default variation is dropdown', function () {
      expect(wrapper.hasClass('dropdown')).toBeTruthy();
    });

    it('default dropdown is not open', function () {
      expect(wrapper.hasClass('open show')).toBeFalsy();
      expect(wrapper.find('[aria-expanded=false]').length).toBe(1);
    });
  });

  describe('when bootstrap4 context is true', function () {
    beforeEach(function () {
      wrapper = shallowWithContext(_react2.default.createElement(_sizePerPageDropdown2.default, props), { bootstrap4: true });
    });

    it('should rendering SizePerPageDropDown correctly', function () {
      expect(wrapper.length).toBe(1);
      expect(wrapper.find('button').length).toBe(1);
      expect(wrapper.find('button').text()).toEqual(currSizePerPage + ' ');
    });

    it('should rendering SizePerPageOption successfully', function () {
      expect(wrapper.find('ul.dropdown-menu').length).toBe(1);
      var sizePerPageOptions = wrapper.find(_sizePerPageOption2.default);
      expect(sizePerPageOptions.length).toBe(options.length);
      sizePerPageOptions.forEach(function (sizePerPage, i) {
        var option = options[i];
        expect(sizePerPage.prop('text')).toEqual(option.text);
        expect(sizePerPage.prop('page')).toEqual(option.page);
        expect(sizePerPage.prop('bootstrap4')).toBeTruthy();
        expect(sizePerPage.prop('onSizePerPageChange')).toEqual(onSizePerPageChange);
      });
    });

    it('no need to render caret', function () {
      expect(wrapper.find('.caret')).toHaveLength(0);
    });

    it('default variation is dropdown', function () {
      expect(wrapper.hasClass('dropdown')).toBeTruthy();
    });

    it('default dropdown is not open', function () {
      expect(wrapper.hasClass('open show')).toBeFalsy();
      expect(wrapper.find('[aria-expanded=false]').length).toBe(1);
    });
  });

  describe('when open prop is true', function () {
    beforeEach(function () {
      wrapper = shallowWithContext(_react2.default.createElement(_sizePerPageDropdown2.default, _extends({}, props, { open: true })), { bootstrap4: false });
    });

    it('should rendering SizePerPageDropDown correctly', function () {
      expect(wrapper.hasClass('open show')).toBeTruthy();
      expect(wrapper.find('[aria-expanded=true]').length).toBe(1);
    });
  });

  describe('when hidden prop is true', function () {
    beforeEach(function () {
      wrapper = shallowWithContext(_react2.default.createElement(_sizePerPageDropdown2.default, _extends({}, props, { hidden: true })), { bootstrap4: false });
    });

    it('should rendering SizePerPageDropDown correctly', function () {
      expect(wrapper.prop('style')).toEqual({ visibility: 'hidden' });
    });
  });

  describe('when btnContextual prop is defined', function () {
    var contextual = 'btn-warning';
    beforeEach(function () {
      wrapper = shallowWithContext(_react2.default.createElement(_sizePerPageDropdown2.default, _extends({}, props, { btnContextual: contextual })), { bootstrap4: false });
    });

    it('should rendering SizePerPageDropDown correctly', function () {
      expect(wrapper.find('button.' + contextual).length).toBe(1);
    });
  });

  describe('when variation prop is defined', function () {
    var variation = 'dropup';
    beforeEach(function () {
      wrapper = shallowWithContext(_react2.default.createElement(_sizePerPageDropdown2.default, _extends({}, props, { variation: variation })), { bootstrap4: false });
    });

    it('should rendering SizePerPageDropDown correctly', function () {
      expect(wrapper.hasClass(variation)).toBeTruthy();
    });
  });

  describe('when className prop is defined', function () {
    var className = 'custom-class';
    beforeEach(function () {
      wrapper = shallowWithContext(_react2.default.createElement(_sizePerPageDropdown2.default, _extends({}, props, { className: className })), { bootstrap4: false });
    });

    it('should rendering SizePerPageDropDown correctly', function () {
      expect(wrapper.hasClass(className)).toBeTruthy();
    });
  });
});