'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

require('jsdom-global/register');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _bootstrapTable = require('react-bootstrap-table-next/src/bootstrap-table');

var _bootstrapTable2 = _interopRequireDefault(_bootstrapTable);

var _pagination = require('../src/pagination');

var _pagination2 = _interopRequireDefault(_pagination);

var _const = require('../src/const');

var _const2 = _interopRequireDefault(_const);

var _context = require('../src/context');

var _context2 = _interopRequireDefault(_context);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var data = [];
for (var i = 0; i < 100; i += 1) {
  data.push({
    id: i,
    name: 'itme name ' + i
  });
}

describe('PaginationContext', function () {
  var wrapper = void 0;
  var PaginationContext = void 0;

  var columns = [{
    dataField: 'id',
    text: 'ID'
  }, {
    dataField: 'name',
    text: 'Name'
  }];

  var defaultPagination = { options: {} };

  var mockBase = jest.fn(function (props) {
    return _react2.default.createElement(_bootstrapTable2.default, _extends({
      keyField: 'id',
      data: data,
      columns: columns
    }, props));
  });

  var handleRemotePaginationChange = jest.fn();

  function shallowContext() {
    var customPagination = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPagination;
    var enableRemote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    mockBase.mockReset();
    handleRemotePaginationChange.mockReset();
    PaginationContext = (0, _context2.default)(jest.fn().mockReturnValue(enableRemote), handleRemotePaginationChange);

    return _react2.default.createElement(
      PaginationContext.Provider,
      {
        pagination: (0, _index2.default)(customPagination),
        columns: columns,
        data: data
      },
      _react2.default.createElement(
        PaginationContext.Consumer,
        null,
        function (paginationProps) {
          return mockBase(paginationProps);
        }
      )
    );
  }

  describe('default render', function () {
    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext());
      wrapper.render();
    });

    it('should have correct Provider property after calling createPaginationContext', function () {
      expect(PaginationContext.Provider).toBeDefined();
    });

    it('should have correct Consumer property after calling createPaginationContext', function () {
      expect(PaginationContext.Consumer).toBeDefined();
    });

    it('should have correct currPage', function () {
      expect(wrapper.instance().currPage).toEqual(_const2.default.PAGE_START_INDEX);
    });

    it('should have correct currSizePerPage', function () {
      expect(wrapper.instance().currSizePerPage).toEqual(_const2.default.SIZE_PER_PAGE_LIST[0]);
    });

    it('should render Pagination component correctly', function () {
      expect(wrapper.length).toBe(1);
      var instance = wrapper.instance();
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination).toHaveLength(1);
      expect(pagination.prop('dataSize')).toEqual(data.length);
      expect(pagination.prop('currPage')).toEqual(instance.currPage);
      expect(pagination.prop('currSizePerPage')).toEqual(instance.currSizePerPage);
      expect(pagination.prop('onPageChange')).toEqual(instance.handleChangePage);
      expect(pagination.prop('onSizePerPageChange')).toEqual(instance.handleChangeSizePerPage);
      expect(pagination.prop('sizePerPageList')).toEqual(_const2.default.SIZE_PER_PAGE_LIST);
      expect(pagination.prop('paginationSize')).toEqual(_const2.default.PAGINATION_SIZE);
      expect(pagination.prop('pageStartIndex')).toEqual(_const2.default.PAGE_START_INDEX);
      expect(pagination.prop('withFirstAndLast')).toEqual(_const2.default.With_FIRST_AND_LAST);
      expect(pagination.prop('alwaysShowAllBtns')).toEqual(_const2.default.SHOW_ALL_PAGE_BTNS);
      expect(pagination.prop('firstPageText')).toEqual(_const2.default.FIRST_PAGE_TEXT);
      expect(pagination.prop('prePageText')).toEqual(_const2.default.PRE_PAGE_TEXT);
      expect(pagination.prop('nextPageText')).toEqual(_const2.default.NEXT_PAGE_TEXT);
      expect(pagination.prop('lastPageText')).toEqual(_const2.default.LAST_PAGE_TEXT);
      expect(pagination.prop('firstPageTitle')).toEqual(_const2.default.FIRST_PAGE_TITLE);
      expect(pagination.prop('prePageTitle')).toEqual(_const2.default.PRE_PAGE_TITLE);
      expect(pagination.prop('nextPageTitle')).toEqual(_const2.default.NEXT_PAGE_TITLE);
      expect(pagination.prop('lastPageTitle')).toEqual(_const2.default.LAST_PAGE_TITLE);
      expect(pagination.prop('hideSizePerPage')).toEqual(_const2.default.HIDE_SIZE_PER_PAGE);
      expect(pagination.prop('hideSizePerPage')).toEqual(_const2.default.HIDE_SIZE_PER_PAGE);
      expect(pagination.prop('paginationTotalRenderer')).toBeNull();
    });

    it('should pass correct cell editing props to children element', function () {
      expect(mockBase.mock.calls[0][0].data).toHaveLength(_const2.default.SIZE_PER_PAGE_LIST[0]);
    });
  });

  describe('componentWillReceiveProps', function () {
    var instance = void 0;
    var nextProps = void 0;

    describe('when nextProps.pagination.options.page is not existing', function () {
      beforeEach(function () {
        wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
          page: 3
        })));
        instance = wrapper.instance();
        wrapper.render();
        nextProps = { data: data, pagination: defaultPagination };
        instance.componentWillReceiveProps(nextProps);
      });

      it('should not set currPage', function () {
        expect(instance.currPage).toEqual(3);
      });
    });

    describe('when nextProps.pagination.options.sizePerPage is not existing', function () {
      beforeEach(function () {
        wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
          sizePerPage: _const2.default.SIZE_PER_PAGE_LIST[2]
        })));
        instance = wrapper.instance();
        wrapper.render();
        nextProps = { data: data, pagination: defaultPagination };
        instance.componentWillReceiveProps(nextProps);
      });

      it('should not set currSizePerPage', function () {
        expect(instance.currSizePerPage).toEqual(_const2.default.SIZE_PER_PAGE_LIST[2]);
      });
    });

    describe('when page is not align', function () {
      beforeEach(function () {
        wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
          page: 2
        })));
        instance = wrapper.instance();
        wrapper.render();
        nextProps = {
          data: [],
          pagination: _extends({}, defaultPagination)
        };
        instance.componentWillReceiveProps(nextProps);
      });

      it('should reset currPage to first page', function () {
        expect(instance.currPage).toEqual(1);
      });

      describe('if options.onPageChange is defined', function () {
        var onPageChange = jest.fn();
        beforeEach(function () {
          onPageChange.mockClear();
          wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
            page: 2
          })));
          instance = wrapper.instance();
          wrapper.render();
          nextProps = {
            data: [],
            pagination: _extends({}, defaultPagination, { options: { onPageChange: onPageChange } })
          };
          instance.componentWillReceiveProps(nextProps);
        });

        it('should call options.onPageChange correctly', function () {
          expect(onPageChange).toHaveBeenCalledTimes(1);
          expect(onPageChange).toHaveBeenCalledWith(instance.currPage, instance.currSizePerPage);
        });
      });
    });
  });

  describe('handleChangePage', function () {
    var instance = void 0;
    var newPage = 3;

    describe('should update component correctly', function () {
      beforeEach(function () {
        wrapper = (0, _enzyme.shallow)(shallowContext());
        instance = wrapper.instance();
        jest.spyOn(instance, 'forceUpdate');
        instance.handleChangePage(newPage);
      });

      it('', function () {
        expect(instance.currPage).toEqual(newPage);
        expect(instance.forceUpdate).toHaveBeenCalledTimes(1);
      });
    });

    describe('if options.onPageChange is defined', function () {
      var onPageChange = jest.fn();
      beforeEach(function () {
        onPageChange.mockClear();
        wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
          onPageChange: onPageChange
        })));
        instance = wrapper.instance();
        jest.spyOn(instance, 'forceUpdate');
        instance.handleChangePage(newPage);
      });

      it('should still update component correctly', function () {
        expect(instance.currPage).toEqual(newPage);
        expect(instance.forceUpdate).toHaveBeenCalledTimes(1);
      });

      it('should call options.onPageChange correctly', function () {
        expect(onPageChange).toHaveBeenCalledTimes(1);
        expect(onPageChange).toHaveBeenCalledWith(newPage, instance.currSizePerPage);
      });
    });

    describe('if remote pagination is enable', function () {
      beforeEach(function () {
        wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination), true));
        instance = wrapper.instance();
        jest.spyOn(instance, 'forceUpdate');
        instance.handleChangePage(newPage);
      });

      it('should still update component correctly', function () {
        expect(instance.currPage).toEqual(newPage);
        expect(instance.forceUpdate).toHaveBeenCalledTimes(0);
      });

      it('should call handleRemotePageChange correctly', function () {
        expect(handleRemotePaginationChange).toHaveBeenCalledTimes(1);
        expect(handleRemotePaginationChange).toHaveBeenCalledWith(newPage, instance.currSizePerPage);
      });
    });
  });

  describe('handleChangeSizePerPage', function () {
    var instance = void 0;
    var newPage = 2;
    var newSizePerPage = 15;

    describe('should update component correctly', function () {
      beforeEach(function () {
        wrapper = (0, _enzyme.shallow)(shallowContext());
        instance = wrapper.instance();
        jest.spyOn(instance, 'forceUpdate');
        instance.handleChangeSizePerPage(newSizePerPage, newPage);
      });

      it('', function () {
        expect(instance.currPage).toEqual(newPage);
        expect(instance.currSizePerPage).toEqual(newSizePerPage);
        expect(instance.forceUpdate).toHaveBeenCalledTimes(1);
      });
    });

    describe('if options.onSizePerPageChange is defined', function () {
      var onSizePerPageChange = jest.fn();
      beforeEach(function () {
        onSizePerPageChange.mockClear();
        wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
          onSizePerPageChange: onSizePerPageChange
        })));
        instance = wrapper.instance();
        jest.spyOn(instance, 'forceUpdate');
        instance.handleChangeSizePerPage(newSizePerPage, newPage);
      });

      it('should still update component correctly', function () {
        expect(instance.currPage).toEqual(newPage);
        expect(instance.currSizePerPage).toEqual(newSizePerPage);
        expect(instance.forceUpdate).toHaveBeenCalledTimes(1);
      });

      it('should call options.onSizePerPageChange correctly', function () {
        expect(onSizePerPageChange).toHaveBeenCalledTimes(1);
        expect(onSizePerPageChange).toHaveBeenCalledWith(newSizePerPage, newPage);
      });
    });

    describe('if remote pagination is enable', function () {
      beforeEach(function () {
        wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination), true));
        instance = wrapper.instance();
        jest.spyOn(instance, 'forceUpdate');
        instance.handleChangeSizePerPage(newSizePerPage, newPage);
      });

      it('should still update component correctly', function () {
        expect(instance.currPage).toEqual(newPage);
        expect(instance.currSizePerPage).toEqual(newSizePerPage);
        expect(instance.forceUpdate).toHaveBeenCalledTimes(0);
      });

      it('should call handleRemotePageChange correctly', function () {
        expect(handleRemotePaginationChange).toHaveBeenCalledTimes(1);
        expect(handleRemotePaginationChange).toHaveBeenCalledWith(newPage, newSizePerPage);
      });
    });
  });

  describe('when options.page is defined', function () {
    var page = 3;

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        page: page
      })));
      wrapper.render();
    });

    it('should set correct currPage', function () {
      expect(wrapper.instance().currPage).toEqual(page);
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('currPage')).toEqual(page);
    });
  });

  describe('when options.sizePerPage is defined', function () {
    var sizePerPage = _const2.default.SIZE_PER_PAGE_LIST[2];

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        sizePerPage: sizePerPage
      })));
      wrapper.render();
    });

    it('should set correct currSizePerPage', function () {
      expect(wrapper.instance().currSizePerPage).toEqual(sizePerPage);
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('currSizePerPage')).toEqual(sizePerPage);
    });
  });

  describe('when options.totalSize is defined', function () {
    var totalSize = 100;

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        totalSize: totalSize
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('dataSize')).toEqual(totalSize);
    });
  });

  describe('when options.showTotal is defined', function () {
    var showTotal = true;

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        showTotal: showTotal
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('showTotal')).toEqual(showTotal);
    });
  });

  describe('when options.pageStartIndex is defined', function () {
    var pageStartIndex = -1;

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        pageStartIndex: pageStartIndex
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('pageStartIndex')).toEqual(pageStartIndex);
    });
  });

  describe('when options.sizePerPageList is defined', function () {
    var sizePerPageList = [10, 40];

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        sizePerPageList: sizePerPageList
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('sizePerPageList')).toEqual(sizePerPageList);
    });
  });

  describe('when options.paginationSize is defined', function () {
    var paginationSize = 10;

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        paginationSize: paginationSize
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('paginationSize')).toEqual(paginationSize);
    });
  });

  describe('when options.withFirstAndLast is defined', function () {
    var withFirstAndLast = false;

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        withFirstAndLast: withFirstAndLast
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('withFirstAndLast')).toEqual(withFirstAndLast);
    });
  });

  describe('when options.alwaysShowAllBtns is defined', function () {
    var alwaysShowAllBtns = true;

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        alwaysShowAllBtns: alwaysShowAllBtns
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('alwaysShowAllBtns')).toEqual(alwaysShowAllBtns);
    });
  });

  describe('when options.firstPageText is defined', function () {
    var firstPageText = '1st';

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        firstPageText: firstPageText
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('firstPageText')).toEqual(firstPageText);
    });
  });

  describe('when options.prePageText is defined', function () {
    var prePageText = 'PRE';

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        prePageText: prePageText
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('prePageText')).toEqual(prePageText);
    });
  });

  describe('when options.nextPageText is defined', function () {
    var nextPageText = 'NEXT';

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        nextPageText: nextPageText
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('nextPageText')).toEqual(nextPageText);
    });
  });

  describe('when options.lastPageText is defined', function () {
    var lastPageText = 'LAST';

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        lastPageText: lastPageText
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('lastPageText')).toEqual(lastPageText);
    });
  });

  describe('when options.firstPageTitle is defined', function () {
    var firstPageTitle = '1st';

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        firstPageTitle: firstPageTitle
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('firstPageTitle')).toEqual(firstPageTitle);
    });
  });

  describe('when options.prePageTitle is defined', function () {
    var prePageTitle = 'PRE';

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        prePageTitle: prePageTitle
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('prePageTitle')).toEqual(prePageTitle);
    });
  });

  describe('when options.nextPageTitle is defined', function () {
    var nextPageTitle = 'NEXT';

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        nextPageTitle: nextPageTitle
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('nextPageTitle')).toEqual(nextPageTitle);
    });
  });

  describe('when options.lastPageTitle is defined', function () {
    var lastPageTitle = 'nth';

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        lastPageTitle: lastPageTitle
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('lastPageTitle')).toEqual(lastPageTitle);
    });
  });

  describe('when options.hideSizePerPage is defined', function () {
    var hideSizePerPage = true;

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        hideSizePerPage: hideSizePerPage
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('hideSizePerPage')).toEqual(hideSizePerPage);
    });
  });

  describe('when options.hidePageListOnlyOnePage is defined', function () {
    var hidePageListOnlyOnePage = true;

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(shallowContext(_extends({}, defaultPagination, {
        hidePageListOnlyOnePage: hidePageListOnlyOnePage
      })));
      wrapper.render();
    });

    it('should rendering Pagination correctly', function () {
      var pagination = wrapper.find(_pagination2.default);
      expect(pagination.length).toBe(1);
      expect(pagination.prop('hidePageListOnlyOnePage')).toEqual(hidePageListOnlyOnePage);
    });
  });
});