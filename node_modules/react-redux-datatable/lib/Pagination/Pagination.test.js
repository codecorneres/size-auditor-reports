'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _chai = require('chai');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _enzyme = require('enzyme');

var _SizePerPageSelect = require('./SizePerPageSelect/SizePerPageSelect');

var _SizePerPageSelect2 = _interopRequireDefault(_SizePerPageSelect);

var _PaginationList = require('./PaginationList/PaginationList');

var _PaginationList2 = _interopRequireDefault(_PaginationList);

var _Pagination = require('./Pagination');

var _Pagination2 = _interopRequireDefault(_Pagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<Pagination>', function () {
  var wrapper = void 0;
  var instance = void 0;

  var createMockProps = function createMockProps(props) {
    return _extends({
      dataSize: 100,
      currentPage: 1,
      currentSizePerPage: 10,
      onPageChange: _sinon2.default.stub(),
      onSizePerPageChange: _sinon2.default.stub()
    }, props);
  };

  describe('default pagination', function () {
    var props = createMockProps();

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Pagination2.default, props));
      instance = wrapper.instance();
    });

    it('should render correctly', function () {
      (0, _chai.expect)(wrapper.length).to.equal(1);
      (0, _chai.expect)(wrapper.hasClass('react-bootstrap-table-pagination')).to.equal(true);
      (0, _chai.expect)(wrapper.find('.react-bootstrap-table-pagination-list-hidden').length).to.equal(0);
    });

    it('should have the correct state', function () {
      (0, _chai.expect)(instance.state).to.be.defined;
      (0, _chai.expect)(instance.state.isDropDownOpen).to.equal(false);
    });

    it('should render the PaginationList component successfully', function () {
      var paginationList = wrapper.find(_PaginationList2.default);
      (0, _chai.expect)(paginationList.length).to.equal(1);
      (0, _chai.expect)(paginationList.prop('pages').length).to.equal(7);
      (0, _chai.expect)(paginationList.prop('onPageChange')).to.equal(instance.handleChangePage);
    });

    it('should render the SizePerPageDropDown component successfully', function () {
      var sizePerPageDropDown = wrapper.find(_SizePerPageSelect2.default);
      (0, _chai.expect)(sizePerPageDropDown.length).to.equal(1);

      (0, _chai.expect)(sizePerPageDropDown.prop('currentSizePerPage')).to.equal('' + props.currentSizePerPage);
      (0, _chai.expect)(sizePerPageDropDown.prop('options')).to.eql([10, 25, 50, 100]);
      (0, _chai.expect)(sizePerPageDropDown.prop('onSizePerPageChange')).to.equal(instance.handleChangeSizePerPage);
      (0, _chai.expect)(sizePerPageDropDown.prop('onClick')).to.equal(instance.toggleDropDown);
      (0, _chai.expect)(sizePerPageDropDown.prop('isOpen')).to.equal(false);
    });
  });

  describe('toggleDropDown', function () {
    beforeEach(function () {
      var props = createMockProps();
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Pagination2.default, props));
      instance = wrapper.instance();
    });

    it('should set state.isDropDownOpen as true when it is false', function () {
      instance.toggleDropDown();
      (0, _chai.expect)(instance.state.isDropDownOpen).to.equal(true);
    });

    it('should set state.isDropDownOpen as false when it is true', function () {
      instance.toggleDropDown();
      instance.toggleDropDown();
      (0, _chai.expect)(instance.state.isDropDownOpen).to.equal(false);
    });
  });

  describe('closeDropDown', function () {
    beforeEach(function () {
      var props = createMockProps();
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Pagination2.default, props));
      instance = wrapper.instance();
    });

    it('should always set state.isDropDownOpen as false', function () {
      instance.closeDropDown();
      (0, _chai.expect)(instance.state.isDropDownOpen).to.equal(false);
      instance.closeDropDown();
      (0, _chai.expect)(instance.state.isDropDownOpen).to.equal(false);
    });
  });

  describe('handleChangeSizePerPage', function () {
    var props = createMockProps();

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Pagination2.default, props));
      instance = wrapper.instance();
    });

    it('should always set state.isDropDownOpen to false', function () {
      instance.handleChangeSizePerPage(10);
      (0, _chai.expect)(instance.state.isDropDownOpen).to.equal(false);
    });

    describe('when new sizePerPage is same as current one', function () {
      it('should not call props.onSizePerPageChange', function () {
        instance.handleChangeSizePerPage(10);
        (0, _chai.expect)(props.onSizePerPageChange.callCount).to.equal(0);
      });
    });

    describe('when new sizePerPage is different than current one', function () {
      it('should call props.onSizePerPageChange', function () {
        instance.handleChangeSizePerPage(30);
        (0, _chai.expect)(props.onSizePerPageChange.callCount).to.equal(1);
      });

      describe('new current page is still in the new pagination list', function () {
        it('should call props.onSizePerPageChange with the correct arguments', function () {
          (0, _chai.expect)(props.onSizePerPageChange.calledWith(30, props.currentPage));
        });
      });

      describe('new current page is still in the new pagination list', function () {
        beforeEach(function () {
          wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Pagination2.default, createMockProps({ currentPage: 10 })));
          instance = wrapper.instance();
        });

        it('should call props.onSizePerPageChange with the correct arguments', function () {
          (0, _chai.expect)(props.onSizePerPageChange.calledWith(30, 4));
        });
      });
    });
  });

  describe('handleChangePage', function () {
    var props = createMockProps();

    beforeEach(function () {
      props.currentPage = 6;
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_Pagination2.default, props));
      instance = wrapper.instance();
    });

    afterEach(function () {
      props.onPageChange.reset();
    });

    it('should call props.onPageChange correctly when new page is equal to <', function () {
      instance.handleChangePage('<');
      (0, _chai.expect)(props.onPageChange.callCount).to.equal(1);
      (0, _chai.expect)(props.onPageChange.calledWith(5)).to.equal(true);
    });

    it('should call props.onPageChange correctly when new page is equal to >', function () {
      instance.handleChangePage('>');
      (0, _chai.expect)(props.onPageChange.callCount).to.equal(1);
      (0, _chai.expect)(props.onPageChange.calledWith(7)).to.equal(true);
    });

    it('should call props.onPageChange correctly when new page is equal to >>', function () {
      instance.handleChangePage('>>');
      (0, _chai.expect)(props.onPageChange.callCount).to.equal(1);
      (0, _chai.expect)(props.onPageChange.calledWith(10)).to.equal(true);
    });

    it('should call props.onPageChange correctly when new page is equal to <<', function () {
      instance.handleChangePage('<<');
      (0, _chai.expect)(props.onPageChange.callCount).to.equal(1);
      (0, _chai.expect)(props.onPageChange.calledWith(1)).to.equal(true);
    });

    it('should call props.onPageChange correctly when new page is a numeric page', function () {
      var newPage = '8';
      instance.handleChangePage(newPage);
      (0, _chai.expect)(props.onPageChange.callCount).to.equal(1);
      (0, _chai.expect)(props.onPageChange.calledWith(parseInt(newPage, 10))).to.equal(true);
    });

    it('should not call props.onPageChange when page is not changed', function () {
      var newPage = props.currentPage;
      instance.handleChangePage(newPage);
      (0, _chai.expect)(props.onPageChange.callCount).to.equal(0);
    });
  });
});