'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _chai = require('chai');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _enzyme = require('enzyme');

var _SizePerPageOption = require('./SizePerPageOption/SizePerPageOption');

var _SizePerPageOption2 = _interopRequireDefault(_SizePerPageOption);

var _SizePerPageSelect = require('./SizePerPageSelect');

var _SizePerPageSelect2 = _interopRequireDefault(_SizePerPageSelect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<SizePerPageSelect>', function () {
  var wrapper = void 0;
  var currentSizePerPage = '25';
  var options = [10, 25];
  var onClick = _sinon2.default.stub();
  var onBlur = _sinon2.default.stub();
  var onSizePerPageChange = _sinon2.default.stub();
  var props = {
    currentSizePerPage: currentSizePerPage,
    options: options,
    onClick: onClick,
    onBlur: onBlur,
    onSizePerPageChange: onSizePerPageChange
  };

  describe('default SizePerPageSelect component', function () {
    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_SizePerPageSelect2.default, props));
    });

    it('should render SizePerPageSelect correctly', function () {
      (0, _chai.expect)(wrapper.length).to.equal(1);
      (0, _chai.expect)(wrapper.find('button').length).to.equal(1);
      (0, _chai.expect)(wrapper.find('button').text()).to.equal(currentSizePerPage + ' ');
    });

    it('should render SizePerPageOption successfully', function () {
      (0, _chai.expect)(wrapper.find('ul.dropdown-menu').length).to.equal(1);
      var sizePerPageOptions = wrapper.find(_SizePerPageOption2.default);
      (0, _chai.expect)(sizePerPageOptions.length).to.equal(options.length);
      sizePerPageOptions.forEach(function (sizePerPage, i) {
        var option = options[i];
        (0, _chai.expect)(sizePerPage.prop('text')).to.equal(option);
        (0, _chai.expect)(sizePerPage.prop('page')).to.equal(option);
        (0, _chai.expect)(sizePerPage.prop('onSizePerPageChange')).to.equal(onSizePerPageChange);
      });
    });

    it('default drop down is not open', function () {
      (0, _chai.expect)(wrapper.hasClass('open show')).to.equal(false);
      (0, _chai.expect)(wrapper.find('[aria-expanded=false]').length).to.equal(1);
    });
  });

  describe('when isOpen prop is true', function () {
    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_SizePerPageSelect2.default, _extends({}, props, { isOpen: true })));
    });

    it('should render SizePerPageSelect correctly', function () {
      (0, _chai.expect)(wrapper.hasClass('open show')).to.equal(true);
      (0, _chai.expect)(wrapper.find('[aria-expanded=true]').length).to.equal(1);
    });
  });
});