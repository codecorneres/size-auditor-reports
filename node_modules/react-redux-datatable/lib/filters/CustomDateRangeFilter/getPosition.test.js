'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _chai = require('chai');

var _getPosition = require('./getPosition');

var _getPosition2 = _interopRequireDefault(_getPosition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('getPosition()', function () {
  it('should default to 0, 0', function () {
    (0, _chai.expect)((0, _getPosition2.default)().x).to.equal(0);
    (0, _chai.expect)((0, _getPosition2.default)().y).to.equal(0);
  });

  var scenario1 = {
    offsetLeft: 100,
    offsetTop: 60,
    scrollLeft: 0,
    scrollTop: 0,
    clientLeft: 0,
    clientTop: 0,
    expectedX: 100,
    expectedY: 60
  };

  var scenario2 = {
    offsetLeft: 100,
    offsetTop: 200,
    scrollLeft: 50,
    scrollTop: 10,
    clientLeft: 20,
    clientTop: 40,
    expectedX: 70,
    expectedY: 230
  };

  var assertions = [_extends({
    testName: 'non body scenario 1',
    tagName: 'testElem'
  }, scenario1), _extends({
    testName: 'body scenario 1',
    tagName: 'BODY'
  }, scenario1), _extends({
    testName: 'non body scenario 2',
    tagName: 'testElem'
  }, scenario2), _extends({
    testName: 'body scenario 2',
    tagName: 'BODY'
  }, scenario2)];

  assertions.forEach(function (_ref) {
    var testName = _ref.testName,
        tagName = _ref.tagName,
        offsetLeft = _ref.offsetLeft,
        offsetTop = _ref.offsetTop,
        scrollLeft = _ref.scrollLeft,
        scrollTop = _ref.scrollTop,
        clientLeft = _ref.clientLeft,
        clientTop = _ref.clientTop,
        expectedX = _ref.expectedX,
        expectedY = _ref.expectedY;

    it('should return an elements coordinates (' + testName + ')', function () {
      var mockElement = {};
      mockElement.tagName = tagName;
      mockElement.offsetLeft = offsetLeft;
      mockElement.offsetTop = offsetTop;
      mockElement.scrollLeft = scrollLeft;
      mockElement.scrollTop = scrollTop;
      mockElement.clientLeft = clientLeft;
      mockElement.clientTop = clientTop;
      mockElement.offsetParent = null;
      (0, _chai.expect)((0, _getPosition2.default)(mockElement).x).to.equal(expectedX);
      (0, _chai.expect)((0, _getPosition2.default)(mockElement).y).to.equal(expectedY);
    });
  });
});