'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('babel-polyfill');

var _enzyme = require('enzyme');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _chai = require('chai');

var _DataTableContainer = require('./DataTableContainer');

var _LoadingGif = require('./LoadingGif/LoadingGif');

var _LoadingGif2 = _interopRequireDefault(_LoadingGif);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var testTableSettings = {
  tableID: 'ExampleDataTable',
  wrapperType: 'section',
  displayTitle: 'Requests Table',
  keyField: 'request_id',
  defaultSort: ['request_id', 'desc'],
  minWidth: 880,
  useLocalStorage: true,
  tableColumns: [{
    title: 'Ref',
    key: 'request_id',
    filter: 'NumberFilter',
    defaultValue: { comparator: '=' },
    width: 74
  }, {
    title: 'User ID',
    key: 'user_id',
    filter: 'NumberFilter',
    defaultValue: { comparator: '=' },
    width: 74,
    export: false
  }, {
    title: 'First Name',
    key: 'first_name',
    width: 90
  }, {
    title: 'Last Name',
    key: 'surname',
    width: 90
  }, {
    title: 'Email Address',
    key: 'email',
    width: 164
  }, {
    title: 'Request Date',
    key: 'created_at',
    filter: 'CustomDateRangeFilter',
    disableSearchAll: true,
    width: 120
  }, {
    title: 'Type',
    key: 'type',
    filter: 'SelectFilter',
    filterOptions: {
      Add: 'Add',
      Amend: 'Amend',
      Remove: 'Remove'
    }
  }, {
    title: 'System',
    key: 'system_type',
    filter: 'SelectFilter',
    filterOptions: {
      training: 'training',
      staging: 'staging',
      production: 'production'
    }
  }, {
    title: 'Actions',
    key: 'actions',
    searchable: false,
    sortable: false,
    export: false
  }]
};

describe('<DataTableContainer>', function () {
  it('should call componentDidMount', function () {
    _sinon2.default.spy(_DataTableContainer.DataTableContainer.prototype, 'componentDidMount');
    (0, _enzyme.mount)(_react2.default.createElement(_DataTableContainer.DataTableContainer, { dispatch: function dispatch() {}, tableSettings: testTableSettings, apiLocation: 'fake/location' }));
    (0, _chai.expect)(_DataTableContainer.DataTableContainer.prototype.componentDidMount.calledOnce).to.equal(true);
  });

  var Component = void 0;
  beforeEach(function () {
    Component = (0, _enzyme.mount)(_react2.default.createElement(_DataTableContainer.DataTableContainer, { dispatch: function dispatch() {}, tableSettings: testTableSettings, apiLocation: 'fake/location' }));
  });

  it('should render', function () {
    (0, _chai.expect)(Component).to.have.length(1);
  });

  it('should display pagination with 0 results', function () {
    (0, _chai.expect)(Component.find('.react-bootstrap-table-pagination').text()).contains('Showing 0 to 0 of 0 Results');
  });

  it('should display a section toolbar title', function () {
    (0, _chai.expect)(Component.find('.section-toolbar-title').first().text()).to.equal('Requests Table');
  });

  it('should display a Fullscreen toggle', function () {
    (0, _chai.expect)(Component.find('.section-toolbar-fullscreen').first().text()).to.equal('Fullscreen');
  });

  it('should display a LoadingGif', function () {
    (0, _chai.expect)(Component.contains(_react2.default.createElement(_LoadingGif2.default, null))).to.equal(true);
  });

  it('should toggle full screen when clicking Toggle Fullscreen', function () {
    (0, _chai.expect)(Component.find('.section-isFullscreen')).to.have.length(0);
    Component.find('.section-toolbar-fullscreen').first().simulate('click');
    (0, _chai.expect)(Component.find('.section-isFullscreen')).to.have.length(1);
    Component.find('.section-toolbar-fullscreen').first().simulate('click');
    (0, _chai.expect)(Component.find('.section-isFullscreen')).to.have.length(0);
  });

  describe('The table data has loaded', function () {
    beforeEach(function () {
      Component.setProps({
        DataTableData: {
          ExampleDataTable: {
            fetched: true
          }
        }
      });
    });

    it('should NOT display a LoadingGif', function () {
      (0, _chai.expect)(Component.contains(_react2.default.createElement(_LoadingGif2.default, null))).to.equal(false);
    });
  });

  it('should refresh the table on refresh click', function () {
    (0, _chai.expect)(Component.state().lastRefresh).to.equal(0);
    Component.find('.refresh-icon').parents().at(0).simulate('click');
    (0, _chai.expect)(Component.state().lastRefresh).to.be.greaterThan(0);
  });

  it('should hide/show column filters when clicking hide/show Filters', function () {
    (0, _chai.expect)(Component.find('.hide-filter')).to.have.length(9);
    Component.find('.filter-icon').parents().at(0).simulate('click');
    (0, _chai.expect)(Component.find('.hide-filter')).to.have.length(0);
    Component.find('.filter-icon').parents().at(0).simulate('click');
    (0, _chai.expect)(Component.find('.hide-filter')).to.have.length(9);
  });

  it('should display an export button', function () {
    (0, _chai.expect)(Component.find('.export-icon').first().parents().at(0).text()).to.equal('Export');
  });

  it('should display an empty search input', function () {
    (0, _chai.expect)(Component.find('.react-bs-table-search-form input').first().props().defaultValue).to.equal('');
  });

  it('should display a search input with a default search term', function () {
    var newTableSettings = _extends({}, Component.props().tableSettings, {
      defaultSearch: 'my search term'
    });
    var NewComponent = (0, _enzyme.mount)(_react2.default.createElement(_DataTableContainer.DataTableContainer, { dispatch: function dispatch() {}, tableSettings: newTableSettings, apiLocation: 'fake/location' }));
    (0, _chai.expect)(NewComponent.find('.react-bs-table-search-form input').first().props().defaultValue).to.equal('my search term');
  });

  it('should display empty column filters', function () {
    (0, _chai.expect)(Component.find('.number-filter-input').first().prop('defaultValue')).to.be.undefined;
    (0, _chai.expect)(Component.find('TextFilter').first().prop('defaultValue')).to.equal('');
    (0, _chai.expect)(Component.find('CustomDateFilter').first().prop('defaultValue')).to.deep.equal({});
    (0, _chai.expect)(Component.find('SelectFilter').first().prop('defaultValue')).to.equal('');
  });

  describe('Default values are set', function () {
    var NewComponent = void 0;
    var fromDate = new Date('2017-01-01');
    var toDate = new Date('2017-01-02');
    var dateRangeDefault = { from: fromDate, to: toDate };
    beforeEach(function () {
      var newTableSettings = _extends({}, Component.props().tableSettings, {
        tableColumns: [{
          title: 'Ref',
          key: 'request_id',
          filter: 'NumberFilter',
          defaultValue: { comparator: '=', number: 66 },
          width: 74
        }, {
          title: 'User ID',
          key: 'user_id',
          filter: 'NumberFilter',
          defaultValue: { comparator: '=' },
          width: 74,
          export: false
        }, {
          title: 'First Name',
          key: 'first_name',
          width: 90,
          defaultValue: 'Dave'
        }, {
          title: 'Last Name',
          key: 'surname',
          width: 90
        }, {
          title: 'Email Address',
          key: 'email',
          width: 164
        }, {
          title: 'Request Date',
          key: 'created_at',
          filter: 'CustomDateRangeFilter',
          disableSearchAll: true,
          width: 120,
          defaultValue: dateRangeDefault
        }, {
          title: 'Type',
          key: 'type',
          filter: 'SelectFilter',
          filterOptions: {
            Add: 'Add',
            Amend: 'Amend',
            Remove: 'Remove'
          },
          defaultValue: 'Amend'
        }, {
          title: 'System',
          key: 'system_type',
          filter: 'SelectFilter',
          filterOptions: {
            training: 'training',
            staging: 'staging',
            production: 'production'
          }
        }, {
          title: 'Actions',
          key: 'actions',
          searchable: false,
          sortable: false,
          export: false
        }]
      });
      NewComponent = (0, _enzyme.mount)(_react2.default.createElement(_DataTableContainer.DataTableContainer, { dispatch: function dispatch() {}, tableSettings: newTableSettings, apiLocation: 'fake/location' }));
    });

    it('should display column filters with default values', function () {
      (0, _chai.expect)(NewComponent.find('.number-filter-input').first().prop('defaultValue')).to.equal(66);
      (0, _chai.expect)(NewComponent.find('TextFilter').first().prop('defaultValue')).to.equal('Dave');
      (0, _chai.expect)(NewComponent.find('CustomDateFilter').first().prop('defaultValue')).to.equal(dateRangeDefault);
      (0, _chai.expect)(NewComponent.find('SelectFilter').first().prop('defaultValue')).to.equal('Amend');
    });

    it('should clear all filters when clear filters is clicked', function () {
      NewComponent.find('.filter-icon-clear').first().simulate('click');
      (0, _chai.expect)(NewComponent.find('.number-filter-input').first().prop('defaultValue')).to.equal('');
      (0, _chai.expect)(NewComponent.find('TextFilter').first().prop('defaultValue')).to.equal('');
      (0, _chai.expect)(NewComponent.find('CustomDateFilter').first().prop('defaultValue')).to.deep.equal({});
      (0, _chai.expect)(NewComponent.find('SelectFilter').first().prop('defaultValue')).to.equal('');
    });
  });

  describe('With 119 (fake) results', function () {
    var NewComponent = void 0;
    beforeEach(function () {
      NewComponent = (0, _enzyme.mount)(_react2.default.createElement(_DataTableContainer.DataTableContainer, {
        dispatch: function dispatch() {},
        tableSettings: testTableSettings,
        apiLocation: 'fake/location',
        DataTableData: {
          ExampleDataTable: {
            data: [],
            dataTotalSize: 119,
            error: null,
            fetched: true,
            fetching: false
          }
        }
      }));
    });

    it('should display pagination with 1 to 10 of 119 results', function () {
      (0, _chai.expect)(NewComponent.find('.react-bootstrap-table-pagination').text()).contains('Showing 1 to 10 of 119 Results');
    });
  });
});