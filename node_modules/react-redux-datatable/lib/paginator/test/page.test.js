'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _page = require('../src/page');

describe('Page Functions', function () {
  var data = void 0;
  var params = [
  // [page, sizePerPage]
  [1, 10], [1, 25], [1, 30], [3, 30], [4, 30], [10, 10], [0, 10], [1, 10], [9, 10]];

  describe('getByCurrPage', function () {
    beforeEach(function () {
      data = [];
      for (var i = 0; i < 100; i += 1) {
        data.push({ id: i, name: 'test_name' + i });
      }
    });

    it('should always return correct data', function () {
      params.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            page = _ref2[0],
            sizePerPage = _ref2[1];

        var rows = (0, _page.getByCurrPage)(data, page, sizePerPage);
        expect(rows).toBeDefined();
        expect(Array.isArray(rows)).toBeTruthy();
        expect(rows.every(function (row) {
          return !!row;
        })).toBeTruthy();
      });
    });

    it('should return empty array when data is empty', function () {
      data = [];
      params.forEach(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            page = _ref4[0],
            sizePerPage = _ref4[1];

        var rows = (0, _page.getByCurrPage)(data, page, sizePerPage);
        expect(rows).toHaveLength(0);
      });
    });
  });
});