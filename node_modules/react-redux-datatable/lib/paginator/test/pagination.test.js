'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _enzyme = require('enzyme');

var _sizePerPageDropdown = require('../src/size-per-page-dropdown');

var _sizePerPageDropdown2 = _interopRequireDefault(_sizePerPageDropdown);

var _PaginationList = require('../src/PaginationList');

var _PaginationList2 = _interopRequireDefault(_PaginationList);

var _pagination = require('../src/pagination');

var _pagination2 = _interopRequireDefault(_pagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Pagination', function () {
  var wrapper = void 0;
  var instance = void 0;

  var createMockProps = function createMockProps(props) {
    return _extends({
      dataSize: 100,
      sizePerPageList: [10, 20, 30, 50],
      currPage: 1,
      currSizePerPage: 10,
      paginationSize: 5,
      withFirstAndLast: true,
      firstPageText: '<<',
      prePageText: '<',
      nextPageText: '>',
      lastPageText: '>>',
      onPageChange: _sinon2.default.stub(),
      onSizePerPageChange: _sinon2.default.stub(),
      hidePageListOnlyOnePage: false,
      hideSizePerPage: false
    }, props);
  };

  describe('default pagiantion', function () {
    var props = createMockProps();

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_pagination2.default, props));
      instance = wrapper.instance();
    });

    it('should rendering correctly', function () {
      expect(wrapper.length).toBe(1);
      expect(wrapper.hasClass('react-bootstrap-table-pagination')).toBeTruthy();
      expect(wrapper.find('.react-bootstrap-table-pagination-list-hidden').length).toBe(0);
    });

    it('should having correct state', function () {
      expect(instance.state).toBeDefined();
      expect(instance.state.totalPages).toEqual(instance.calculateTotalPage());
      expect(instance.state.lastPage).toEqual(instance.calculateTotalPage());
      expect(instance.state.dropdownOpen).toBeFalsy();
    });

    it('should rendering PaginationList component successfully', function () {
      var paginationList = wrapper.find(_PaginationList2.default);
      expect(paginationList.length).toBe(1);
      expect(paginationList.prop('pages')).toEqual(instance.calculatePageStatus(instance.calculatePages()));
      expect(paginationList.prop('onPageChange')).toEqual(instance.handleChangePage);
    });

    it('should rendering SizePerPageDropDown component successfully', function () {
      var sizePerPageDropDown = wrapper.find(_sizePerPageDropdown2.default);
      expect(sizePerPageDropDown.length).toBe(1);

      expect(sizePerPageDropDown.prop('currSizePerPage')).toEqual('' + props.currSizePerPage);
      expect(sizePerPageDropDown.prop('options')).toEqual(instance.calculateSizePerPageStatus());
      expect(sizePerPageDropDown.prop('onSizePerPageChange')).toEqual(instance.handleChangeSizePerPage);
      expect(sizePerPageDropDown.prop('onClick')).toEqual(instance.toggleDropDown);
      expect(sizePerPageDropDown.prop('open')).toEqual(instance.state.dropdownOpen);
    });
  });

  describe('when props.sizePerPageList is empty array', function () {
    beforeEach(function () {
      var props = createMockProps({ sizePerPageList: [] });
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_pagination2.default, props));
      instance = wrapper.instance();
    });

    it('should not rendering SizePerPageDropDown component', function () {
      var sizePerPageDropDown = wrapper.find(_sizePerPageDropdown2.default);
      expect(sizePerPageDropDown.length).toBe(0);
    });
  });

  describe('when props.hideSizePerPage is true', function () {
    beforeEach(function () {
      var props = createMockProps({ hideSizePerPage: true });
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_pagination2.default, props));
      instance = wrapper.instance();
    });

    it('should not rendering SizePerPageDropDown component', function () {
      var sizePerPageDropDown = wrapper.find(_sizePerPageDropdown2.default);
      expect(sizePerPageDropDown.length).toBe(0);
    });
  });

  describe('when props.hidePageListOnlyOnePage is true', function () {
    beforeEach(function () {
      var props = createMockProps({ hidePageListOnlyOnePage: true, dataSize: 7 });
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_pagination2.default, props));
      instance = wrapper.instance();
    });

    it('should find react-bootstrap-table-pagination-list-hidden class when only one page', function () {
      expect(wrapper.find('.react-bootstrap-table-pagination-list-hidden').length).toBe(1);
    });
  });

  describe('componentWillReceiveProps', function () {
    describe('when next props.currSizePerPage is diff than current one', function () {
      var nextProps = createMockProps({ currSizePerPage: 20 });

      beforeEach(function () {
        wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_pagination2.default, createMockProps()));
        instance = wrapper.instance();
      });

      it('should setting correct state.totalPages', function () {
        instance.componentWillReceiveProps(nextProps);
        expect(instance.state.totalPages).toEqual(instance.calculateTotalPage(nextProps.currSizePerPage));
      });

      it('should setting correct state.lastPage', function () {
        instance.componentWillReceiveProps(nextProps);
        var totalPages = instance.calculateTotalPage(nextProps.currSizePerPage);
        expect(instance.state.lastPage).toEqual(totalPages);
      });
    });

    describe('when next props.dataSize is diff than current one', function () {
      var nextProps = createMockProps({ dataSize: 33 });

      beforeEach(function () {
        wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_pagination2.default, createMockProps()));
        instance = wrapper.instance();
      });

      it('should setting correct state.totalPages', function () {
        instance.componentWillReceiveProps(nextProps);
        expect(instance.state.totalPages).toEqual(instance.calculateTotalPage(nextProps.currSizePerPage, nextProps.dataSize));
      });

      it('should setting correct state.lastPage', function () {
        instance.componentWillReceiveProps(nextProps);
        var totalPages = instance.calculateTotalPage(nextProps.currSizePerPage, nextProps.dataSize);
        expect(instance.state.lastPage).toEqual(totalPages);
      });
    });
  });

  describe('toggleDropDown', function () {
    beforeEach(function () {
      var props = createMockProps();
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_pagination2.default, props));
      instance = wrapper.instance();
    });

    it('should setting state.dropdownOpen as true when it is false', function () {
      instance.toggleDropDown();
      expect(instance.state.dropdownOpen).toBeTruthy();
    });

    it('should setting state.dropdownOpen as false when it is true', function () {
      instance.toggleDropDown();
      instance.toggleDropDown();
      expect(instance.state.dropdownOpen).toBeFalsy();
    });
  });

  describe('closeDropDown', function () {
    beforeEach(function () {
      var props = createMockProps();
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_pagination2.default, props));
      instance = wrapper.instance();
    });

    it('should always setting state.dropdownOpen as false', function () {
      instance.closeDropDown();
      expect(instance.state.dropdownOpen).toBeFalsy();
      instance.closeDropDown();
      expect(instance.state.dropdownOpen).toBeFalsy();
    });
  });

  describe('handleChangeSizePerPage', function () {
    var props = createMockProps();

    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_pagination2.default, props));
      instance = wrapper.instance();
    });

    it('should always setting state.dropdownOpen to false', function () {
      instance.handleChangeSizePerPage(10);
      expect(instance.state.dropdownOpen).toBeFalsy();
    });

    describe('when new sizePerPage is same as current one', function () {
      it('should not calling props.onSizePerPageChange callback', function () {
        instance.handleChangeSizePerPage(10);
        expect(props.onSizePerPageChange.callCount).toBe(0);
      });
    });

    describe('when new sizePerPage is diff than current one', function () {
      it('should not calling props.onSizePerPageChange callback', function () {
        instance.handleChangeSizePerPage(30);
        expect(props.onSizePerPageChange.callCount).toBe(1);
      });

      describe('and new current page is still in the new lagination list', function () {
        it('should calling props.onSizePerPageChange with correct argument', function () {
          expect(props.onSizePerPageChange.calledWith(30, props.currPage));
        });
      });

      describe('and new current page is still in the new lagination list', function () {
        beforeEach(function () {
          wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_pagination2.default, createMockProps({ currPage: 10 })));
          instance = wrapper.instance();
        });

        it('should calling props.onSizePerPageChange with correct argument', function () {
          expect(props.onSizePerPageChange.calledWith(30, 4));
        });
      });
    });
  });

  describe('handleChangePage', function () {
    var props = createMockProps();

    beforeEach(function () {
      props.currPage = 6;
      wrapper = (0, _enzyme.shallow)(_react2.default.createElement(_pagination2.default, props));
      instance = wrapper.instance();
    });

    afterEach(function () {
      props.onPageChange.reset();
    });

    it('should calling props.onPageChange correctly when new page is eq props.prePageText', function () {
      instance.handleChangePage(props.prePageText);
      expect(props.onPageChange.callCount).toBe(1);
      expect(props.onPageChange.calledWith(5)).toBeTruthy();
    });

    it('should calling props.onPageChange correctly when new page is eq props.nextPageText', function () {
      instance.handleChangePage(props.nextPageText);
      expect(props.onPageChange.callCount).toBe(1);
      expect(props.onPageChange.calledWith(7)).toBeTruthy();
    });

    it('should calling props.onPageChange correctly when new page is eq props.lastPageText', function () {
      instance.handleChangePage(props.lastPageText);
      expect(props.onPageChange.callCount).toBe(1);
      expect(props.onPageChange.calledWith(10)).toBeTruthy();
    });

    it('should calling props.onPageChange correctly when new page is eq props.firstPageText', function () {
      instance.handleChangePage(props.firstPageText);
      expect(props.onPageChange.callCount).toBe(1);
      expect(props.onPageChange.calledWith(1)).toBeTruthy();
    });

    it('should calling props.onPageChange correctly when new page is a numeric page', function () {
      var newPage = '8';
      instance.handleChangePage(newPage);
      expect(props.onPageChange.callCount).toBe(1);
      expect(props.onPageChange.calledWith(parseInt(newPage, 10))).toBeTruthy();
    });

    it('should not calling props.onPageChange correctly when page is not changed', function () {
      var newPage = props.currPage;
      instance.handleChangePage(newPage);
      expect(props.onPageChange.callCount).toBe(0);
    });
  });
});