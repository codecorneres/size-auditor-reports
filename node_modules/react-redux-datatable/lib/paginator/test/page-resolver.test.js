'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _chai = require('chai');

var _pageResolver = require('../src/page-resolver');

var _pageResolver2 = _interopRequireDefault(_pageResolver);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var extendTo = function extendTo(Base) {
  return function (_Base) {
    _inherits(MockComponent, _Base);

    function MockComponent(props) {
      _classCallCheck(this, MockComponent);

      return _possibleConstructorReturn(this, (MockComponent.__proto__ || Object.getPrototypeOf(MockComponent)).call(this, props));
      // this.state = this.initialState();
    }

    _createClass(MockComponent, [{
      key: 'render',
      value: function render() {
        return null;
      }
    }]);

    return MockComponent;
  }(Base);
};

describe('PageResolver', function () {
  var ExtendBase = (0, _pageResolver2.default)(_react.Component);
  var MockComponent = extendTo(ExtendBase);

  var createMockProps = function createMockProps() {
    return {
      dataSize: 100,
      sizePerPageList: [10, 20, 30, 50],
      currPage: 1,
      currSizePerPage: 10,
      paginationSize: 5,
      withFirstAndLast: true,
      firstPageText: '<<',
      prePageText: '<',
      nextPageText: '>',
      lastPageText: '>>'
    };
  };

  var wrapper = void 0;

  describe('initialize', function () {
    beforeEach(function () {
      var mockElement = _react2.default.createElement(MockComponent, createMockProps(), null);
      wrapper = (0, _enzyme.shallow)(mockElement);
    });

    it('should creating initial state correctly', function () {
      var instance = wrapper.instance();
      (0, _chai.expect)(instance.state.totalPages).toBeDefined();
      (0, _chai.expect)(instance.state.totalPages).toEqual(instance.calculateTotalPage());
      (0, _chai.expect)(instance.state.lastPage).toBeDefined();
      (0, _chai.expect)(instance.state.lastPage).toEqual(instance.state.totalPages);
      (0, _chai.expect)(instance.state.dropdownOpen).toBeDefined();
      (0, _chai.expect)(instance.state.dropdownOpen).toBeFalsy();
    });
  });

  describe('calculateFromTo', function () {
    var props = createMockProps();
    beforeEach(function () {
      var mockElement = _react2.default.createElement(MockComponent, props, null);
      wrapper = (0, _enzyme.shallow)(mockElement);
    });

    it('should return correct array with from and to value', function () {
      var instance = wrapper.instance();
      (0, _chai.expect)(instance.calculateFromTo()).toEqual([1, props.currSizePerPage]);
    });

    describe('if data is empty', function () {
      beforeEach(function () {
        props.dataSize = 87;
        props.currPage = 9;
        var mockElement = _react2.default.createElement(MockComponent, props, null);
        wrapper = (0, _enzyme.shallow)(mockElement);
      });

      it('should return correct array with from and to value', function () {
        var instance = wrapper.instance();
        (0, _chai.expect)(instance.calculateFromTo()).toEqual([81, props.dataSize]);
      });
    });

    describe('if current page is last page', function () {
      beforeEach(function () {
        props.dataSize = 0;
        var mockElement = _react2.default.createElement(MockComponent, props, null);
        wrapper = (0, _enzyme.shallow)(mockElement);
      });

      it('should return correct array with from and to value', function () {
        var instance = wrapper.instance();
        (0, _chai.expect)(instance.calculateFromTo()).toEqual([0, 0]);
      });
    });
  });

  describe('calculateTotalPage', function () {
    var props = createMockProps();

    describe('when missing sizePerPage argument', function () {
      beforeEach(function () {
        var mockElement = _react2.default.createElement(MockComponent, props, null);
        wrapper = (0, _enzyme.shallow)(mockElement);
      });

      it('should getting total pages correctly by default props.currSizePerPage', function () {
        var instance = wrapper.instance();
        (0, _chai.expect)(instance.calculateTotalPage()).toEqual(10);
      });
    });

    describe('when sizePerPage argument given', function () {
      beforeEach(function () {
        var mockElement = _react2.default.createElement(MockComponent, props, null);
        wrapper = (0, _enzyme.shallow)(mockElement);
      });

      it('should getting total pages correctly by sizePerPage argument', function () {
        var instance = wrapper.instance();
        (0, _chai.expect)(instance.calculateTotalPage(25)).toEqual(4);
      });
    });
  });

  describe('generatePagination', function () {
    describe('calculate by state.totalPages and state.lastPage', function () {
      var props = createMockProps();
      beforeEach(function () {
        var mockElement = _react2.default.createElement(MockComponent, props, null);
        wrapper = (0, _enzyme.shallow)(mockElement);
      });

      /*
       // could put pagination calc things in own package?
      change function name to generatePagination
      (combine with other function? calculatePageStatus)
      (or even see render/other components)
       1 2 3 4 5 > >>
      currentPage: 1
      pageCount: 7
      paginationSize: 5
       use provider (each or foreach)... with labels...
      see GW / space etc...
         */

      it('should getting pages list correctly', function () {
        var instance = wrapper.instance();
        // expect(instance.generatePagination()).to.equal(
        //   [props.prePageText, 1, 2, 3, 4, 5, props.nextPageText, props.lastPageText]);

        (0, _chai.expect)(instance.generatePagination(1, 7, 5)).to.eql([1, 2, 3, 4, 5, '>', '>>']);
        (0, _chai.expect)(instance.generatePaginationPages(1, 7, 5)).to.eql([1, 2, 3, 4, 5]);

        (0, _chai.expect)(instance.generatePagination(1, 3, 5)).to.eql([1, 2, 3, '>']);
        (0, _chai.expect)(instance.generatePaginationPages(1, 3, 5)).to.eql([1, 2, 3]);

        (0, _chai.expect)(instance.generatePagination(1, 5, 5)).to.eql([1, 2, 3, 4, 5, '>']);
        (0, _chai.expect)(instance.generatePaginationPages(1, 5, 5)).to.eql([1, 2, 3, 4, 5]);

        (0, _chai.expect)(instance.generatePagination(4, 5, 5)).to.eql(['<', 1, 2, 3, 4, 5, '>']);
        (0, _chai.expect)(instance.generatePaginationPages(40, 500, 5)).to.eql([38, 39, 40, 41, 42]);
        (0, _chai.expect)(instance.generatePaginationPages(40, 41, 5)).to.eql([37, 38, 39, 40, 41]);

        (0, _chai.expect)(instance.generatePaginationPages(4, 5, 5)).to.eql([1, 2, 3, 4, 5]);

        (0, _chai.expect)(instance.generatePagination(5, 5, 5)).to.eql(['<', 1, 2, 3, 4, 5]);
        (0, _chai.expect)(instance.generatePaginationPages(5, 5, 5)).to.eql([1, 2, 3, 4, 5]);

        (0, _chai.expect)(instance.generatePagination(2, 7, 5)).to.eql(['<', 1, 2, 3, 4, 5, '>', '>>']);
        (0, _chai.expect)(instance.generatePaginationPages(2, 7, 5)).to.eql([1, 2, 3, 4, 5]);

        (0, _chai.expect)(instance.generatePagination(4, 7, 5)).to.eql(['<<', '<', 2, 3, 4, 5, 6, '>', '>>']);
        (0, _chai.expect)(instance.generatePagination(5, 7, 5)).to.eql(['<<', '<', 3, 4, 5, 6, 7, '>']);
        (0, _chai.expect)(instance.generatePaginationPages(4, 7, 5)).to.eql([2, 3, 4, 5, 6]);
      });
    });

    describe('calculate by props.currPage', function () {
      var props = createMockProps();
      var firstPageText = props.firstPageText,
          prePageText = props.prePageText,
          nextPageText = props.nextPageText,
          lastPageText = props.lastPageText;


      it('should getting pages list correctly', function () {
        var currPages = Array.from(Array(10).keys());
        currPages.forEach(function (currPage) {
          props.currPage = currPage + 1;
          wrapper = (0, _enzyme.shallow)(_react2.default.createElement(MockComponent, props));
          var pageList = wrapper.instance().generatePagination();

          if (props.currPage < 4) {
            (0, _chai.expect)(pageList).toEqual([prePageText, 1, 2, 3, 4, 5, nextPageText, lastPageText]);
          } else if (props.currPage > 7) {
            (0, _chai.expect)(pageList).toEqual([firstPageText, prePageText, 6, 7, 8, 9, 10, nextPageText]);
          } else if (props.currPage === 4) {
            (0, _chai.expect)(pageList).toEqual([firstPageText, prePageText, 2, 3, 4, 5, 6, nextPageText, lastPageText]);
          } else if (props.currPage === 5) {
            (0, _chai.expect)(pageList).toEqual([firstPageText, prePageText, 3, 4, 5, 6, 7, nextPageText, lastPageText]);
          } else if (props.currPage === 6) {
            (0, _chai.expect)(pageList).toEqual([firstPageText, prePageText, 4, 5, 6, 7, 8, nextPageText, lastPageText]);
          } else {
            (0, _chai.expect)(pageList).toEqual([firstPageText, prePageText, 5, 6, 7, 8, 9, nextPageText, lastPageText]);
          }
        });
      });
    });

    describe('the quantity of pages is calculated by props.paginationSize', function () {
      var props = createMockProps();
      var indicators = [props.firstPageText, props.prePageText, props.lastPageText, props.nextPageText];

      it('should getting pages list correctly', function () {
        [1, 3, 5, 8, 10].forEach(function (paginationSize) {
          props.paginationSize = paginationSize;
          wrapper = (0, _enzyme.shallow)(_react2.default.createElement(MockComponent, props));
          var pageList = wrapper.instance().generatePagination();
          var result = pageList.filter(function (p) {
            return indicators.indexOf(p) === -1;
          });
          (0, _chai.expect)(result.length).toEqual(props.paginationSize);
        });
      });
    });

    describe('when props.withFirstAndLast is true', function () {
      var props = createMockProps();
      describe('and last page is not visible by props.currPage', function () {
        it('should getting pages list which contain last page indication', function () {
          [1, 2, 3, 4, 5, 6, 7].forEach(function (currPage) {
            props.currPage = currPage;
            wrapper = (0, _enzyme.shallow)(_react2.default.createElement(MockComponent, props));
            var pageList = wrapper.instance().generatePagination();
            (0, _chai.expect)(pageList.indexOf(props.lastPageText) > -1).toBeTruthy();
          });
        });
      });

      describe('and first page is not visible by props.currPage', function () {
        it('should getting pages list which contain first page indication', function () {
          [10, 9, 8, 7, 6, 5, 4].forEach(function (currPage) {
            props.currPage = currPage;
            wrapper = (0, _enzyme.shallow)(_react2.default.createElement(MockComponent, props));
            var pageList = wrapper.instance().generatePagination();
            (0, _chai.expect)(pageList.indexOf(props.firstPageText) > -1).toBeTruthy();
          });
        });
      });
    });

    describe('when props.withFirstAndLast is false', function () {
      var props = createMockProps();
      it('should not contain first and last page indication always', function () {
        var currPages = Array.from(Array(10).keys());
        currPages.forEach(function (currPage) {
          props.currPage = currPage + 1;
          props.withFirstAndLast = false;
          wrapper = (0, _enzyme.shallow)(_react2.default.createElement(MockComponent, props));
          var pageList = wrapper.instance().generatePagination();
          (0, _chai.expect)(pageList.indexOf(props.lastPageText) > -1).toBeFalsy();
          (0, _chai.expect)(pageList.indexOf(props.firstPageText) > -1).toBeFalsy();
        });
      });
    });

    describe('when state.totalPages is zero', function () {
      var props = createMockProps();
      props.dataSize = 0;

      beforeEach(function () {
        var mockElement = _react2.default.createElement(MockComponent, props, null);
        wrapper = (0, _enzyme.shallow)(mockElement);
      });

      it('should getting empty array', function () {
        (0, _chai.expect)(wrapper.instance().generatePagination()).toEqual([]);
      });
    });
  });

  describe('calculatePageStatus', function () {
    var instance = void 0;
    var pageStatus = void 0;

    describe('default case', function () {
      var props = createMockProps();
      beforeEach(function () {
        var mockElement = _react2.default.createElement(MockComponent, props, null);
        wrapper = (0, _enzyme.shallow)(mockElement);
        instance = wrapper.instance();
        pageStatus = instance.calculatePageStatus(instance.generatePagination());
      });

      it('should returning correct format for page status', function () {
        pageStatus.forEach(function (p) {
          (0, _chai.expect)(Object.prototype.hasOwnProperty.call(p, 'page')).toBeTruthy();
          (0, _chai.expect)(Object.prototype.hasOwnProperty.call(p, 'active')).toBeTruthy();
          (0, _chai.expect)(Object.prototype.hasOwnProperty.call(p, 'disabled')).toBeTruthy();
          (0, _chai.expect)(Object.prototype.hasOwnProperty.call(p, 'title')).toBeTruthy();
        });
      });

      it('should mark active status as true when it is props.currPage', function () {
        (0, _chai.expect)(pageStatus.find(function (p) {
          return p.page === props.currPage;
        }).active).toBeTruthy();
      });

      it('only have one page\'s active status is true', function () {
        (0, _chai.expect)(pageStatus.filter(function (p) {
          return p.page === props.currPage;
        }).length).toEqual(1);
      });
    });
  });

  describe('calculateSizePerPageStatus', function () {
    describe('when props.sizePerPageList is an number array', function () {
      var props = createMockProps();
      beforeEach(function () {
        var mockElement = _react2.default.createElement(MockComponent, props, null);
        wrapper = (0, _enzyme.shallow)(mockElement);
      });

      it('should getting correctly sizePerPage status', function () {
        var instance = wrapper.instance();
        var result = instance.calculateSizePerPageStatus();
        (0, _chai.expect)(result.length).toEqual(props.sizePerPageList.length);
        result.forEach(function (sizePerPage, i) {
          (0, _chai.expect)(sizePerPage.text).toEqual('' + props.sizePerPageList[i]);
          (0, _chai.expect)(sizePerPage.page).toEqual(props.sizePerPageList[i]);
        });
      });
    });

    describe('when props.sizePerPageList is an object array', function () {
      var props = createMockProps();
      props.sizePerPageList = [{
        text: 'ten', value: 10
      }, {
        text: 'thirty', value: 30
      }];

      beforeEach(function () {
        var mockElement = _react2.default.createElement(MockComponent, props, null);
        wrapper = (0, _enzyme.shallow)(mockElement);
      });

      it('should getting correctly sizePerPage status', function () {
        var instance = wrapper.instance();
        var result = instance.calculateSizePerPageStatus();
        (0, _chai.expect)(result.length).toEqual(props.sizePerPageList.length);
        result.forEach(function (sizePerPage, i) {
          (0, _chai.expect)(sizePerPage.text).toEqual(props.sizePerPageList[i].text);
          (0, _chai.expect)(sizePerPage.page).toEqual(props.sizePerPageList[i].value);
        });
      });
    });
  });
});