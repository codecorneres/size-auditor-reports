'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createListItems = exports.calculateFromTo = exports.calculatePageCount = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// todo: add tests?
// todo: add jsdocs?
// todo: put in own helpers folder with index?
var calculatePageCount = exports.calculatePageCount = function calculatePageCount(sizePerPage, dataSize) {
  return Math.ceil(dataSize / sizePerPage);
};

var calculateFromTo = exports.calculateFromTo = function calculateFromTo(currentPage, currentSizePerPage, dataSize) {
  if (dataSize === 0) return [0, 0];

  var from = (currentPage - 1) * currentSizePerPage;
  var to = Math.min(currentSizePerPage * currentPage, dataSize);
  return [from + 1, to];
};

var generatePages = function generatePages(currentPage, pageCount) {
  if (pageCount <= 0) return [];

  var startPage = Math.max(currentPage - Math.floor(_constants.PAGINATION_SIZE / 2), 1);
  var endPage = startPage + _constants.PAGINATION_SIZE - 1;

  if (endPage > pageCount) {
    endPage = pageCount;
    startPage = Math.max(endPage - _constants.PAGINATION_SIZE + 1, 1);
  }

  return _lodash2.default.range(startPage, endPage + 1);
};

var getListItemTitle = function getListItemTitle(page) {
  var matchListItem = [].concat(_toConsumableArray(_constants.LIST_ITEMS)).filter(function (_ref) {
    var TEXT = _ref.TEXT;
    return TEXT === page;
  });
  if (matchListItem) return matchListItem.TEXT;
  return '' + page;
};

var generateListItems = function generateListItems() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var currentPage = arguments[1];
  return items.map(function (page) {
    return {
      page: page,
      active: page === currentPage,
      title: getListItemTitle(page)
    };
  });
};

var createListItems = exports.createListItems = function createListItems(currentPage, pageCount) {
  var pages = generatePages(currentPage, pageCount);
  var firstPageItem = currentPage > 1 && !pages.includes(1) ? [_constants.LIST_ITEMS.FIRST.TEXT] : [];
  var previousPageItem = currentPage > 1 ? [_constants.LIST_ITEMS.PREVIOUS.TEXT] : [];
  var nextPageItem = currentPage < pageCount ? [_constants.LIST_ITEMS.NEXT.TEXT] : [];
  var lastPageItem = currentPage < pageCount && !pages.includes(pageCount) ? [_constants.LIST_ITEMS.LAST.TEXT] : [];

  var listArray = [].concat(firstPageItem, previousPageItem, _toConsumableArray(pages), nextPageItem, lastPageItem);

  return generateListItems(listArray, currentPage);
};