'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

exports.default = function (ExtendBase) {
  return function (_ExtendBase) {
    _inherits(PageResolver, _ExtendBase);

    function PageResolver() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, PageResolver);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PageResolver.__proto__ || Object.getPrototypeOf(PageResolver)).call.apply(_ref, [this].concat(args))), _this), _this.calculatePageCount = function (sizePerPage, dataSize) {
        return Math.ceil(dataSize / sizePerPage);
      }, _this.generatePaginationPages = function (currentPage, pageCount, paginationSize) {
        if (pageCount <= 0) return [];

        var startPage = Math.max(currentPage - Math.floor(paginationSize / 2), 1);
        var endPage = startPage + paginationSize - 1;

        if (endPage > pageCount) {
          endPage = pageCount;
          startPage = Math.max(endPage - paginationSize + 1, 1);
        }

        return _lodash2.default.range(startPage, endPage + 1);
      }, _this.generatePagination = function (currentPage, pageCount, paginationSize) {
        var paginationPages = _this.generatePaginationPages(currentPage, pageCount, paginationSize);
        return [].concat(_toConsumableArray(currentPage > 1 && !paginationPages.includes(1) ? ['<<'] : []), _toConsumableArray(currentPage > 1 ? ['<'] : []), _toConsumableArray(paginationPages), _toConsumableArray(currentPage < pageCount ? ['>'] : []), _toConsumableArray(currentPage < pageCount && !paginationPages.includes(pageCount) ? ['>>'] : []));
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(PageResolver, [{
      key: 'calculateFromTo',
      value: function calculateFromTo() {
        var _props = this.props,
            dataSize = _props.dataSize,
            currentPage = _props.currentPage,
            currentSizePerPage = _props.currentSizePerPage;

        console.log('dataSize, currentPage, currentSizePerPage', dataSize, currentPage, currentSizePerPage);

        var from = (currentPage - 1) * currentSizePerPage;
        from = dataSize === 0 ? 0 : from + 1;
        var to = Math.min(currentSizePerPage * currentPage, dataSize);
        if (to > dataSize) to = dataSize;
        console.log(from, to);
        return [from, to];
      }
    }, {
      key: 'calculatePageStatus',
      value: function calculatePageStatus() {
        var _this2 = this;

        var pages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var lastPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastPage;
        var _props2 = this.props,
            currentPage = _props2.currentPage,
            firstPageText = _props2.firstPageText,
            prePageText = _props2.prePageText,
            nextPageText = _props2.nextPageText,
            lastPageText = _props2.lastPageText;

        var isStart = function isStart(page) {
          return currentPage === 1 && (page === firstPageText || page === prePageText);
        };
        var isEnd = function isEnd(page) {
          return currentPage === lastPage && (page === nextPageText || page === lastPageText);
        };

        return pages.filter(function (page) {
          return !(isStart(page) || isEnd(page));
        }).map(function (page) {
          var title = void 0;
          var active = page === currentPage;
          var disabled = isStart(page) || isEnd(page);

          if (page === nextPageText) {
            title = _this2.props.nextPageTitle;
          } else if (page === prePageText) {
            title = _this2.props.prePageTitle;
          } else if (page === firstPageText) {
            title = _this2.props.firstPageTitle;
          } else if (page === lastPageText) {
            title = _this2.props.lastPageTitle;
          } else {
            title = '' + page;
          }

          return { page: page, active: active, disabled: disabled, title: title };
        });
      }
    }, {
      key: 'calculateSizePerPageStatus',
      value: function calculateSizePerPageStatus() {
        var sizePerPageList = this.props.sizePerPageList;

        return sizePerPageList.map(function (_sizePerPage) {
          var pageText = _sizePerPage.text || _sizePerPage;
          var pageNumber = _sizePerPage.value || _sizePerPage;
          return {
            text: '' + pageText,
            page: pageNumber
          };
        });
      }
    }]);

    return PageResolver;
  }(ExtendBase);
};